namespace: YuvalRaiz.TheMachine.internal
operation:
  name: generate_build_content
  inputs:
    - machine_id
    - control_name
    - outcome_price
    - shipment_size
    - stations_names
    - stations_max_production
    - stations_output
    - stations_inputs
    - hostname_patren
    - host_domain
    - ip_subnet
    - tz
  python_action:
    use_jython: false
    script: "# do not remove the execute function \ndef execute(machine_id,control_name,outcome_price,shipment_size,stations_names,stations_max_production,stations_output,stations_inputs,hostname_patren,host_domain,ip_subnet,tz):\n    sql_commands=''\n    values=''\n    hosts_data=''\n    input_names={}\n    names=stations_names.split('|')\n    outputs=stations_output.split('|')\n    max_production_in_cycle=stations_max_production.split('|')\n    inputs=stations_inputs.split('|')\n    num_of_stations=len(names)\n    results=''\n    num_of_hosts='0'\n    \n    cis = \"\"\n    relations = \"\"\n    cmdb_json = \"\"\n    \n    if num_of_stations!= len(outputs) or num_of_stations != len(inputs) or num_of_stations != len(max_production_in_cycle):    \n        results='uneven data'\n        return locals()\n    control_hostname=hostname_patren+str(num_of_stations+1)+'.'+host_domain\n    num_of_hosts=str(num_of_stations+1)\n\t    \n\n    # machine_configuration\n    #\n    sql_commands = '''insert into public.machine_configuration (machine_id,outcome_price, shipment_size,control_name,control_hostname) \n                      values ('%s',%s,%s,'%s','%s');''' % (machine_id, outcome_price, shipment_size, control_name, control_hostname)\n    cis = '''\n      { \"ucmdbId\\\": \"90\",\n        \"type\" : \"business_service\",\n        \"properties\": {\"name\": \"%s\"} },\n      { \"ucmdbId\\\": \"100\",\n        \"type\" : \"business_process\",\n        \"properties\": {\"name\": \"%s\"} },\n      { \"ucmdbId\\\": \"110\",\n        \"type\" : \"node\",\n        \"properties\": {\"name\": \"%s\", \"primary_dns_name\": \"%s\"} },\n      { \"ucmdbId\\\": \"120\",\n        \"type\" : \"ip_address\",\n        \"properties\": {\"name\": \"%s.%s\"} }''' % (machine_id,control_name,control_hostname,control_hostname,ip_subnet,str(num_of_stations+1))\n\n    relations = '''\n      { \"ucmdbId\":\"901\",\n\t    \"type\": \"containment\",\n\t    \"end1Id\": 90,\n\t    \"end2Id\": 100,\n\t    \"properties\": {}},\n      { \"ucmdbId\":\"902\",\n\t    \"type\": \"consumer_Provider\",\n\t    \"end1Id\": 100,\n\t    \"end2Id\": 110,\n\t    \"properties\": {}},\n      { \"ucmdbId\":\"903\",\n\t    \"type\": \"containment\",\n\t    \"end1Id\": 110,\n\t    \"end2Id\": 120,\n\t    \"properties\": {}}'''\n\n\n    # machine_runtime_configuration\n    #\n    sql_commands = sql_commands+'''insert into public.machine_runtime_configuration (machine_id,tz,power) \n    values ('%s','%s'::TIMESTAMP, 'on');''' % (machine_id,tz)\n\n    # station_configuration\n    #  \n    values=''\n    for i in range(0,len(names)):\n        id=str(i)\n        station_hostname=hostname_patren+str(i+1)+'.'+host_domain\n        if ',' in outputs[i]:\n            main_output, alternative_output = outputs[i].split(',')\n            input_names[alternative_output]=id\n            alternative_output=\"'\"+alternative_output+\"'\"\n        else:\n            main_output=outputs[i]\n            alternative_output='Null'\n        input_names[main_output]=id\n        values='''%s('%s','%s','%s','%s',%s,0,'%s',%s)''' % ('' if len(values) == 0 else values+',', machine_id,i+1,names[i],station_hostname,max_production_in_cycle[i],main_output,alternative_output)\n        #input_names[outputs[i]]=id\n        cis=cis+''',\n         { \"ucmdbId\\\": \"100%s\",\n            \"type\" : \"business_process\",\n            \"properties\": {\"name\": \"%s\"} },\n          { \"ucmdbId\\\": \"101%s\",\n            \"type\" : \"node\",\n            \"properties\": {\"name\": \"%s\", \"primary_dns_name\": \"%s\"} },\n          { \"ucmdbId\\\": \"102%s\",\n            \"type\" : \"ip_address\",\n            \"properties\": {\"name\": \"%s.%s\"} }''' % (id,names[i],id,station_hostname,station_hostname,id,ip_subnet,str(i+1))\n        relations=relations+''',\n          { \"ucmdbId\":\"901%s\",\n    \t    \"type\": \"containment\",\n    \t    \"end1Id\": 90,\n    \t    \"end2Id\": 100%s,\n    \t    \"properties\": {}},\n          { \"ucmdbId\":\"902%s\",\n    \t    \"type\": \"consumer_Provider\",\n    \t    \"end1Id\": 100%s,\n    \t    \"end2Id\": 101%s,\n    \t    \"properties\": {}},\n          { \"ucmdbId\":\"903%s\",\n    \t    \"type\": \"containment\",\n    \t    \"end1Id\": 101%s,\n    \t    \"end2Id\": 102%s,\n    \t    \"properties\": {}}''' % (id,id,id,id,id,id,id,id)\n    sql_commands = sql_commands+'insert into public.station_configuration (machine_id,station_id,station_name,station_hostname,max_production_in_cycle,inaccuracy,outcome_part_id,alternative_part_id) values '+values+';'\n\n\n    # station_runttime_configuration\n    #\n    values=''\n    for i in range(0,len(names)):\n        values='''%s('%s','%s','%s'::TIMESTAMP,'on',100)''' % ('' if len(values)==0 else values+',',machine_id,i+1,tz)\n    sql_commands = sql_commands+'insert into public.station_runtime_configuration (machine_id,station_id,tz,power,efficiency) values '+values+';'\n\n    # station_requiremnts\n    #\n    values=''\n    relations_id=8000\n    for i in range(0,len(names)):\n        if len(inputs[i]) > 0:\n            for pair in inputs[i].split(','):\n                src_part_id=pair.split('=')[0]\n                values='''%s('%s','%s','%s',%s) ''' % ('' if len(values) == 0 else values+',', machine_id, i+1 ,src_part_id,pair.split('=')[1] )\n                if src_part_id in input_names.keys():\n                    relations=relations+''',\n                      { \"ucmdbId\":\"%s\",\n                \t    \"type\": \"consumer_Provider\",\n                \t    \"end1Id\": 100%s,\n                \t    \"end2Id\": 100%s,\n                \t    \"properties\": {}}''' %(str(relations_id),str(i), input_names[src_part_id])\n                    relations_id=relations_id+1\n                else: \n                    input_names[src_part_id]='yuval'\n    sql_commands = sql_commands + 'insert into  public.station_requirements (machine_id,station_id,part_id,required_quantity) values '+values+';'\n    \n    # machine_part_inventory\n    #\n    values=''\n    for n in input_names.keys():\n        values='''%s('%s','%s','%s'::TIMESTAMP, 0,'start')''' % ('' if len(values)==0 else values+',',machine_id,n,tz)\n    sql_commands = sql_commands + 'insert into public.parts_inventory (machine_id, part_id, tz,quantity, src) values '+values+';'     \n        \n    for i in range(1,len(names)+2):\n        hosts_data='''%s%s %s.%s''' % ( '' if len(hosts_data)==0 else hosts_data+',', hostname_patren+str(i), ip_subnet, str(i)  )\n\n    cmdb_json='''{ \"cis\": [%s],\n \"relations\":[%s] }''' % (cis,relations)\n\n    \n    return locals()"
  outputs:
    - sql_commands
    - hosts_data
    - cmdb_json
    - num_of_hosts
    - input_names
    - values
  results:
    - UNEVEN_STATION_DATA: "${results=='uneven data'}"
      CUSTOM_0: "${result=='uneven data'}"
    - SUCCESS
